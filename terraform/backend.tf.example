# Example S3 Backend Configuration
# Rename this file to backend.tf and configure for remote state storage
# ⚠️ This is commented out for demo purposes - local state is used by default

# terraform {
#   backend "s3" {
#     bucket         = "atlas-micro-terraform-state"
#     key            = "environments/${var.environment}/terraform.tfstate"
#     region         = "eu-west-1"
#     encrypt        = true
#     dynamodb_table = "atlas-micro-terraform-locks"
#     
#     # Optional: KMS key for state encryption
#     # kms_key_id = "arn:aws:kms:eu-west-1:ACCOUNT_ID:key/KEY_ID"
#   }
# }

# Instructions for setting up remote state:
# 
# 1. Create S3 bucket for state storage:
#    aws s3 mb s3://atlas-micro-terraform-state --region eu-west-1
#    aws s3api put-bucket-versioning --bucket atlas-micro-terraform-state --versioning-configuration Status=Enabled
#    aws s3api put-bucket-encryption --bucket atlas-micro-terraform-state --server-side-encryption-configuration '{
#      "Rules": [
#        {
#          "ApplyServerSideEncryptionByDefault": {
#            "SSEAlgorithm": "AES256"
#          }
#        }
#      ]
#    }'
#
# 2. Create DynamoDB table for state locking:
#    aws dynamodb create-table \
#      --table-name atlas-micro-terraform-locks \
#      --attribute-definitions AttributeName=LockID,AttributeType=S \
#      --key-schema AttributeName=LockID,KeyType=HASH \
#      --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 \
#      --region eu-west-1
#
# 3. Uncomment the backend configuration above
# 4. Run: terraform init -migrate-state
